syntax = "proto3";

// cmdFunc IDs
// t[e[0] = "NONE_CMD_SETS"] = 0,
// t[e[3] = "BP_CMD_SETS"] = 3,
// t[e[4] = "PCS_CMD_SETS"] = 4,
// t[e[96] = "EMS_CMD_SETS"] = 96, <<<<<<<<<<<< this is what we're dealing with here
// t[e[97] = "MPPT_CMD_SETS"] = 97,
// t[e[53] = "IOT_CMD_SETS"] = 53,
// t[e[7] = "DAB_CMD_SETS"] = 7,
// t[e[2] = "ADPT_CMD_SETS"] = 2,
// t[e[210] = "AFCI_CMD_SETS"] = 210,
// t[e[50] = "APP_CMD_SETS"] = 50,

// EMS_CMD_SET IDs
// t[e[0] = "EMS_CMD_ID_NONE"] = 0,
// t[e[1] = "EMS_CMD_ID_HEARTBEAT_REPORT"] = 1, <<<<<<<<<<<<<<<<<<<<<<<<<< present
// t[e[2] = "EMS_CMD_ID_SYS_METER_REPORT"] = 2,
// t[e[3] = "EMS_CMD_ID_ERROR_CODE_REPORT"] = 3,
// t[e[7] = "EMS_CMD_ID_BP_HEARTBEAT_REPORT"] = 7, <<<<<<<<<<<<<<<<<<<<<<< we also see this
// t[e[8] = "EMS_CMD_ID_CHANGE_REPORT"] = 8, <<<<<<<<<<<<<<<<<<<<<<<<<<<<< we see this often
// t[e[9] = "EMS_CMD_ID_SYS_ERROR_MASK_CODE_REPORT"] = 9,
// t[e[10] = "EMS_CMD_ID_ALL_TIMER_TASK_REPORT"] = 10,
// t[e[11] = "EMS_CMD_ID_ECOLOGY_DEV_REPORT"] = 11,
// t[e[12] = "EMS_CMD_ID_MASTER_SLAVE_DEV_LIST_REPORT"] = 12,
// t[e[13] = "EMS_CMD_ID_PARAM_CHANGE_REPORT"] = 13,
// t[e[17] = "EMS_CMD_ID_STATE_CHANGE_REPORT"] = 17,
// t[e[97] = "EMS_CMD_ID_ENERGY_STREAM_SWITCH"] = 97,
// t[e[98] = "EMS_CMD_ID_SYS_WORKMODE_SET"] = 98,
// t[e[99] = "EMS_CMD_ID_SYS_BACKUP_EVENT_SET"] = 99,
// t[e[100] = "EMS_CMD_ID_SYS_KEEP_SOC_SET"] = 100,
// t[e[101] = "EMS_CMD_ID_SYS_MAX_FEED_POWER_SET"] = 101,
// t[e[102] = "EMS_CMD_ID_SYS_OFF_GRID_SET"] = 102,
// t[e[103] = "EMS_CMD_ID_SYS_PARAM_GET"] = 103,
// t[e[104] = "EMS_CMD_ID_SYS_RTC_GET"] = 104,
// t[e[105] = "EMS_CMD_ID_SYS_ON_OFF_MACHINE_SET"] = 105,
// t[e[106] = "EMS_CMD_ID_ECOLOGY_DEV_GET"] = 106,
// t[e[107] = "EMS_CMD_ID_ECOLOGY_DEV_BIND"] = 107,
// t[e[108] = "EMS_CMD_ID_ECOLOGY_DEV_REPORT_PERIO"] = 108,
// t[e[109] = "EMS_CMD_ID_ECOLOGY_DEV_PARAM_SET"] = 109,
// t[e[110] = "EMS_CMD_ID_ECOLOGY_DEV_BIND_LIST_GET"] = 110,
// t[e[112] = "EMS_CMD_ID_SYS_BAT_CHG_DSG_SET"] = 112,
// t[e[113] = "EMS_CMD_ID_SET_SAFETY_PAREM"] = 113,
// t[e[114] = "EMS_CMD_ID_GET_ERROR_CODE"] = 114,
// t[e[115] = "EMS_CMD_ID_SYS_FEED_POWER_SET"] = 115,
// t[e[116] = "EMS_CMD_ID_SYS_CTRL_REPORT_RATE"] = 116,
// t[e[117] = "EMS_CMD_ID_SYS_METER_CFG_SET"] = 117,
// t[e[118] = "EMS_CMD_ID_SYS_ERROR_ERASE_CODE"] = 118,
// t[e[119] = "EMS_CMD_ID_SYS_CTRL_LED"] = 119,
// t[e[120] = "EMS_CMD_ID_SYS_ERROR_MASK_CODE"] = 120,
// t[e[121] = "EMS_CMD_ID_SYS_FACTORY_RESET"] = 121,
// t[e[122] = "EMS_CMD_ID_SYS_TYPE_CFG_SET"] = 122,
// t[e[123] = "EMS_CMD_ID_MUL_PEAK_SET"] = 123,
// t[e[124] = "EMS_CMD_ID_SG_READY_SET"] = 124,
// t[e[125] = "EMS_CMD_ID_TIMER_TASK_SET"] = 125,
// t[e[126] = "EMS_CMD_ID_TIMER_TASK_GET"] = 126,
// t[e[127] = "EMS_CMD_ID_ALL_TIMER_TASK_GET"] = 127,
// t[e[128] = "EMS_CMD_ID_SYS_SELF_SET"] = 128,
// t[e[129] = "EMS_CMD_ID_AFCI_SELF_TEST"] = 129,
// t[e[130] = "EMS_CMD_ID_AFCI_ERROR_ERASE"] = 130,
// t[e[131] = "EMS_CMD_ID_AFCI_PARAM_SET"] = 131,
// t[e[132] = "EMS_CMD_ID_PV_INV_METER_GET"] = 132,
// t[e[133] = "EMS_CMD_ID_PV_INV_METER_CFG_SET"] = 133,
// t[e[134] = "EMS_CMD_ID_DEVICE_ROLE_SET"] = 134,
// t[e[135] = "EMS_CMD_ID_CTRL_DEVICE_SET"] = 135,
// t[e[136] = "EMS_CMD_ID_MASTER_DEV_SET"] = 136,
// t[e[137] = "EMS_CMD_ID_EMS_PARAM_SET"] = 137,
// t[e[138] = "EMS_CMD_ID_EMS_ENERGY_EFFICIENT_SET"] = 138,
// t[e[33] = "EMS_CMD_ID_ENERGY_STREAM_REPORT"] = 33,
// t[e[34] = "EMS_CMD_ID_ENERGY_STREAM_DETAIL"] = 34,
// t[e[35] = "EMS_CMD_ID_SYS_RTC_SYNC"] = 35,
// t[e[36] = "EMS_CMD_ID_SYS_EVENT_REPORT"] = 36,
// t[e[37] = "EMS_CMD_ID_GET_PAREM"] = 37,
// t[e[38] = "EMS_CMD_ID_SG_READY_DETAIL"] = 38,
// t[e[39] = "EMS_CMD_ID_PV_INV_ENERGY_STREAM_REPORT"] = 39, <<<<<<<<<<<<<<<<<<<< this is present
// t[e[40] = "EMS_CMD_ID_ECOLOGY_DEV_ENERGY_STREAM_DETAIL"] = 40,
// t[e[41] = "EMS_CMD_ID_ECOLOGY_DEV_ENERGY_STREAM_REPORT"] = 41,
// t[e[42] = "EMS_CMD_ID_ECOLOGY_DEV_BIND_LIST_REPORT"] = 42,
// t[e[50] = "EMS_CMD_ID_ENERGY_STREAM_REPORT_PARALLEL"] = 50, <<<<<<<<<<<<<<<<<< this is present, too
// t[e[51] = "EMS_CMD_ID_ENERGY_STREAM_DETAIL_PARALLEL"] = 51,
// t[e[161] = "EMS_CMD_ID_MODULE_CHG_DSG_MAX_GET"] = 161,
// t[e[162] = "EMS_CMD_ID_MODULE_CHG_DSG_PWR_SET"] = 162,
// t[e[163] = "EMS_CMD_ID_MODULE_SELF_CHECK_SET"] = 163,
// t[e[164] = "EMS_CMD_ID_MODULE_SELF_CHECK_STAT_SYNC"] = 164,
// t[e[165] = "EMS_CMD_ID_HEARTBEAT"] = 165,
// t[e[166] = "EMS_CMD_ID_MODE_SYNC"] = 166,
// t[e[167] = "EMS_CMD_ID_DATA_SYNC"] = 167,
// t[e[168] = "EMS_CMD_ID_OPEN_LOOP"] = 168,
// t[e[169] = "EMS_CMD_ID_GET_SAFETY_PARAM"] = 169,
// t[e[170] = "EMS_CMD_ID_MODULE_BUS_VOLT_SET"] = 170,
// t[e[171] = "EMS_CMD_ID_MPPT_GET_VOC"] = 171,
// t[e[172] = "EMS_CMD_ID_UPGRADE_NOTIFY"] = 172,
// t[e[173] = "EMS_CMD_ID_ISULATION_CHECK"] = 173,
// t[e[174] = "EMS_CMD_ID_LOWLIGHT_CHECK"] = 174,
// t[e[175] = "EMS_CMD_ID_BP_CALIB_LIMIT_PCS_POWER"] = 175,
// t[e[177] = "EMS_CMD_ID_STA_SYNC"] = 177,
// t[e[178] = "EMS_CMD_ID_BP_ACTIVE_CAL_DATA_SYNC"] = 178,
// t[e[179] = "EMS_CMD_ID_METER_SYNC"] = 179,
// t[e[180] = "EMS_CMD_ID_GET_DEV_MODEL"] = 180,
// t[e[181] = "EMS_CMD_ID_SOFT_START_SET"] = 181,
// t[e[182] = "EMS_CMD_ID_TIMER_SYNC_BP"] = 182,
// t[e[183] = "EMS_CMD_ID_RESET_PRODUCT_TYPE"] = 183,
// t[e[184] = "EMS_CMD_ID_PARALLEL_STATE_SYNC"] = 184,
// t[e[185] = "EMS_CMD_ID_PARALLEL_DATA_SYNC"] = 185,
// t[e[186] = "EMS_CMD_ID_PARALLEL_DATA_EMS_SYNC"] = 186,
// t[e[187] = "EMS_CMD_ID_PARALLEL_DATA_EMS_SET"] = 187,
// t[e[188] = "EMS_CMD_ID_PARALLEL_DATA_EMS_SET_ACK"] = 188,
// t[e[189] = "EMS_CMD_ID_PARALLEL_GET_MASTER_DATA"] = 189,
// t[e[190] = "EMS_CMD_ID_PARALLEL_POWER_SET"] = 190,
// t[e[191] = "EMS_CMD_ID_PARALLEL_POWER_SET_ACK"] = 191,
// t[e[192] = "EMS_CMD_ID_PARALLEL_METER_SYNC"] = 192,
// t[e[193] = "EMS_CMD_ID_PARALLEL_METER_DEV_SET"] = 193,
// t[e[194] = "EMS_CMD_ID_PARALLEL_CFG_EMS_SYNC"] = 194,
// t[e[195] = "EMS_CMD_ID_REQ_DATA"] = 195,

message HeartbeatReport {
    // cmdFunc: 96, cmdId: 1
    float bpRemainWatth = 1;
    uint32 bpDsgTime = 2;
    bool rateCtrlSwtich = 3;
    uint32 sysRateCtrlTime = 4;
    uint32 duraTime = 5;
    float pcsActPwr = 10;
    float pcsAcFreq = 11;

//    case 12:
//        n.pcsAPhase = p.sys.PhaseInfo.decode(e, e.uint32());
//        break;
//    case 13:
//        n.pcsBPhase = p.sys.PhaseInfo.decode(e, e.uint32());
//        break;
//    case 14:
//        n.pcsCPhase = p.sys.PhaseInfo.decode(e, e.uint32());
//        break;
//        case 1:
//            n.vol = e.float();
//            break;
//        case 2:
//            n.amp = e.float();
//            break;
//        case 3:
//            n.actPwr = e.float();
//            break;
//        case 4:
//            n.reactPwr = e.float();
//            break;
//        case 5:
//            n.apparentPwr = e.float();
//            break;
//

//    case 15:
//        n.pcsLoadInfo && n.pcsLoadInfo.length || (n.pcsLoadInfo = []),
//        n.pcsLoadInfo.push(p.sys.LoadInfo.decode(e, e.uint32()));
//        break;

    float pcsBusVolt = 16;
    float pcsLeakAmp = 17;
    float pcsDci = 18;
    float pcsDcv = 19;

//    case 30:
//        n.meterHeartBeat && n.meterHeartBeat.length || (n.meterHeartBeat = []),
//        n.meterHeartBeat.push(p.sys.MeterStaReport.decode(e, e.uint32()));
//        break;
//    case 31:
//        n.mpptHeartBeat && n.mpptHeartBeat.length || (n.mpptHeartBeat = []),
//        n.mpptHeartBeat.push(p.sys.MpptStaReport.decode(e, e.uint32()));
//        break;

    float pcsVbusRef = 32;
    float pcsActivePowerRef = 33;
    float pcsActivePowerLimitUp = 34;
    float pcsActivePowerLimitDn = 35;
    float pcsBpPower = 36;
    float pcsBpPowerChgLimit = 37;
    float pcsRelayStateShow = 38;
    float pcsGridSafetyFuncRecord = 39;
    float pcsGridSafetyStateRecord = 40;
    float pcsGridInvErrorRms = 41;
    float pcsPfcCurReal = 42;
    float pcsPfcCurRef = 43;
    float pcsReactivePowerRef = 44;
    float pcsMeterPower = 45;
    float pcsCommInterfaceState = 46;
    float pcsAverageVoltage = 47;
    float pcsVgridThd = 48;
    float pcsInterruptOccupancyRate = 49;
    float emsMpptSelfcheckState = 50;
    uint32 emsMpptStartupState = 51;
    uint32 emsBpSelfcheckState = 52;
    uint32 emsBpStartupState = 53;
    uint32 emsPcsSelfcheckState = 54;
    uint32 emsPcsStartupState = 55;
    float emsBusVolt = 56;
    uint32 emsActiveOffGridCmd = 57;
    uint32 emsBpAliveNum = 58;
    float emsBpPower = 59;
    float emsBpChg = 60;
    float emsBpDsg = 61;
    uint32 emsBpChgRequest = 62;
    uint32 emsSelfUsedCnt = 63;
    uint32 emsAcMakeupTriggleSoc = 64;
    uint32 emsAcMakeupExitSoc = 65;
    uint32 emsAcMakeupMinSoc = 66;
    uint32 emsAcMakeupCnt = 67;
    uint32 emsStartFsmState = 68;
    uint32 emsMpptRunState = 69;
    uint32 emsMpptModStat = 70;
    uint32 emsStopCmd = 71;
    uint32 emsSysCfg = 72;
    uint32 emsLpState = 73;
    uint32 emsLpType = 74;
    uint32 emsLpMpptCnt = 75;
    uint32 emsLpBpCnt = 76;
    uint32 emsLpStateFlag = 77;
    uint32 emsSocCalibState = 78;
    uint32 emsSocCalibRequest = 79;
    uint32 emsMpptHbState = 80;
    float emsNtcTempMax = 81;
    float emsBusVoltErrSlidFilter = 82;
    float emsBusVoltRipple = 83;
    float emsPvInvPwr = 84;
    float mpptBusVolRef = 100;
    float dcdcBusVolRef = 101;
    float dcdcBpVol = 102;
    float dcdcInductanceCurr = 103;
    float innerTemperature = 104;
    uint32 powerLimitMode = 105;
    uint32 invRatedPower = 106;
    uint32 dcdcStateRecord = 107;
    uint32 emsWorkMode = 108;
    float pcsBackupPwr = 109;
}

message BpHeartbeatReport {
    // cmdFunc: 96, cmdId: 7
    repeated int32 bytes_1 = 1;
    int32 int_2 = 2;
    int32 int_3 = 3;
    int32 int_4 = 4;
    int32 int_5 = 5;
    int32 int_6 = 6;
    int32 int_7 = 7;
    int32 int_8 = 8;
    int32 int_9 = 9;
    int32 int_10 = 10;
    int32 int_14 = 11;
    int32 int_15 = 12;
    int32 int_16 = 13;
    int32 int_17 = 14;
    string moduleSn = 15;
}

message ChangeReport {
    // cmdFunc: 96, cmdId: 8
    uint32 sysWorkSta = 1;
    uint32 sysGridSta = 2;
    int32 emsWordMode = 3;
    uint32 emsBackupEvent = 4;
    uint32 bpChgDsgSta = 5;
    uint32 emsKeepSoc = 6;
    uint32 bpSoc = 7;
    uint32 emsSysSelfCheckStat = 8;
    uint32 bpOnlineSum = 9;
    uint32 sysOnOffMachineStat = 10;
    uint32 sysBatChgUpLimit = 11;
    uint32 sysBatDsgDownLimit = 12;
    uint32 bpTotalChgEnergy = 13;
    uint32 bpTotalDsgEnergy = 14;
    uint32 sysBatBackupRatio = 15;
    uint32 emsFeedMode = 16;
    uint32 emsFeedRatio = 17;
    uint32 emsFeedPwr = 18;
    uint32 sysMeterCfg = 19;
    uint32 sysTypeCfg = 20;
    int32 pcsRunSta = 21;
    uint32 pcsAcErrCode = 22;
    uint32 pcsDcErrCode = 23;
    float pcsOverVol1 = 31;
    float pcsOverVol2 = 32;
    float pcsOverVol3 = 33;
    uint32 pcsOverVolTime1 = 34;
    uint32 pcsOverVolTime2 = 35;
    uint32 pcsOverVolTime3 = 36;
    float pcsLowVol1 = 37;
    float pcsLowVol2 = 38;
    float pcsLowVol3 = 39;
    uint32 pcsLowVolTime1 = 40;
    uint32 pcsLowVolTime2 = 41;
    uint32 pcsLowVolTime3 = 42;
    float pcsOverVolRecover = 43;
    float pcsLowVolRecover = 44;
    uint32 pcsVolRecoverTime = 45;
    float pcs_10minOverVol = 46;
    uint32 pcs_10minOverVolTime = 47;
    float pcsOverFreq1 = 48;
    float pcsOverFreq2 = 49;
    uint32 pcsOverFreqTime1 = 50;
    uint32 pcsOverFreqTime2 = 51;
    float pcsLowFreq1 = 52;
    float pcsLowFreq2 = 53;
    uint32 pcsLowFreqTime1 = 54;
    uint32 pcsLowFreqTime2 = 55;
    float pcsOverFreqRecover = 56;
    float pcsLowFreqRecover = 57;
    uint32 pcsFreqRecoverTime = 58;
    uint32 pcsHvrtLvrtSwitch = 59;
    float pcsOverVolRideThroughStart1 = 60;
    float pcsOverVolRideThroughStart2 = 61;
    uint32 pcsOverVolRideThroughProtectTime1 = 62;
    uint32 pcsOverVolRideThroughProtectTime2 = 63;
    float pcsLowVolRideThroughStart1 = 64;
    float pcsLowVolRideThroughStart2 = 65;
    float pcsLowVolRideThroughStart3 = 66;
    uint32 pcsLowVolRideThroughProtectTime1 = 67;
    uint32 pcsLowVolRideThroughProtectTime2 = 68;
    uint32 pcsLowVolRideThroughProtectTime3 = 69;
    float pcsHighVolRideThroughRecover = 70;
    float pcsLowVolRideThroughRecover = 71;
    uint32 pcsIslandDetectSwitch = 72;
    uint32 pcsActivePowerDeratingSwitch = 73;
    float pcsActivePowerDeratingPercent = 74;
    float pcsActivePowerGradient = 75;
    uint32 pcsActivePowerSoftstartSwitch = 76;
    uint32 pcsActivePowerSoftstartTime = 77;
    uint32 pcsOverFreqDeratingSwitch = 78;
    float pcsOverFreqDeratingPowerBased = 79;
    float pcsOverFreqDeratingStart = 80;
    float pcsOverFreqDeratingEnd = 81;
    float pcsOverFreqDeratingSlope = 82;
    float pcsOverFreqDeratingRecoverSlope = 83;
    uint32 pcsOverFreqDeratingFrozeSwitch = 84;
    float pcsOverFreqDeratingCutoffPower = 85;
    uint32 pcsUnderFreqIncrementSwitch = 86;
    float pcsUnderFreqIncrementStart = 87;
    float pcsUnderFreqIncrementEnd = 88;
    float pcsUnderFreqIncrementSlope = 89;
    float pcsUnderFreqIncrementRecoverSlope = 90;
    uint32 pcsUnderFreqIncrementFrozeSwitch = 91;
    uint32 pcsAntiBackFlowSwitch = 92;
    uint32 pcsOverVolDeratingSwitch = 93;
    float pcsOverVolDeratingStart = 94;
    float pcsOverVolDeratingEnd = 95;
    float pcsOverVolDeratingStartingPower = 96;
    float pcsOverVolDeratingEndPower = 97;
    float pcsOverVolDeratingTimeConst = 98;
    uint32 pcsReactPwrModeSelect = 99;
    float pcsReactPwrCompensation = 100;
    float pcsPfValue = 101;
    float pcsReactPwrPercent = 102;
    float pcsQuV1 = 103;
    float pcsQuV2 = 104;
    float pcsQuV3 = 105;
    float pcsQuV4 = 106;
    float pcsQuQ1 = 107;
    float pcsQuQ2 = 108;
    float pcsQuQ3 = 109;
    float pcsQuQ4 = 110;
    float pcsQuTimeConst = 111;
    float pcsCospP1 = 112;
    float pcsCospP2 = 113;
    float pcsCospP3 = 114;
    float pcsCospPf1 = 115;
    float pcsCospPf2 = 116;
    float pcsCospPf3 = 117;
    uint32 pcsSafetyCountryCodeSelection = 118;
    uint32 pcsReconnectGridDetectSwitch = 119;
    uint32 pcsOnGridWaitTime = 120;
    float pcsHighVolOnGrid = 121;
    float pcsLowVolOnGrid = 122;
    float pcsHighFreqOnGrid = 123;
    float pcsLowFreqOnGrid = 124;
    uint32 pcsFaultRecoverOnGridWaitTime = 125;
    float pcsFaultRecoverHighVolOnGrid = 126;
    float pcsFaultRecoverLowVolOnGrid = 127;
    float pcsFaultRecoverHighFreqOnGrid = 128;
    float pcsFaultRecoverLowFreqOnGrid = 129;
    uint32 pcsPowerDeratingFlag = 130;
    uint32 pcsPowerDeratingSet = 131;
    uint32 pcsSendEnd = 132;
    bool rateCtrlSwtich = 133;
    uint32 sysRateCtrlTime = 134;
    uint32 duraTime = 135;
    uint32 pcs_10minOverVolSwitch = 136;
    float pcsActivePowerSoftStartRate = 137;
    float pcsActivePowerNormalRampUpRate = 138;
    float pcsOverFreqDeratingStartDelay = 139;
    float pcsOverFreqDeratingEndDelay = 140;
    uint32 pcsOverFreqDeratingRecoverSlopeSwitch = 141;
    float pcsUnderFreqIncrementStartDelay = 142;
    float pcsUnderFreqIncrementEndDelay = 143;
    uint32 pcsOverVolDeratingDelayTime = 144;
    uint32 pcsOngridReconnectFlag = 145;
    float pcsQuLockinPower = 146;
    float pcsQuLockoutPower = 147;
    float pcsQuMinimumCosphi = 148;
    uint32 pcsFastCheck = 149;
    uint32 pcsFunctionEnable = 150;
    uint32 emsCtrlLedType = 151;
    uint32 emsCtrlLedBright = 152;
    uint32 pcsUnderFreqIncrementRecoverSlopeSwitch = 153;
    float pcsOverVolDeratingDaleyTime = 154; // Note: Typo, should be "DelayTime"
    float pcsCospP4 = 155;
    float pcsCospPf4 = 156;
    uint32 pcsReserved1 = 157;
    uint32 pcsReserved2 = 158;
    uint32 pcsReserved3 = 159;
    uint32 pcsReserved4 = 160;
    uint32 pcsReserved5 = 161;
    uint32 pcsReserved6 = 162;
    float pcsReserved7 = 163;
    float pcsReserved8 = 164;
    float pcsReserved9 = 165;
    float pcsReserved10 = 166;
    float pcsReserved11 = 167;
    float pcsReserved12 = 168;
    float pcsReserved13 = 169;
    float pcsReserved14 = 170;
    float pcsReserved15 = 171;
    float pcsReserved16 = 172;
    bool sysMulPeakSwitch = 180;
    uint32 sysMulPeakTime = 181;
//    case 182:
//        n.emsSgReady = p.sys.SgReadyParam.decode(e, e.uint32());
//        break;
    bool emsSgReadyEn = 183;
    uint32 emsSgRunStat = 184;
    uint32 emsStopAll = 185;
    sint32 iot_4gOn = 186;
    sint32 iot_4gSta = 187;
    sint32 iot_4gPdp = 188;
    sint32 iot_4gErr = 189;
    uint32 sysHeatStat = 190;
    uint32 pcsAcWarningCode = 191;
    uint32 pcsRelaySelfCheckSta = 192;
    uint32 pcsRunFsmState = 193;
    uint32 mppt1FaultCode = 194;
    uint32 mppt2FaultCode = 195;
    uint32 mppt1WarningCode = 196;
    uint32 mppt2WarningCode = 197;
    uint32 bpLineOffFlag = 198;
    uint32 bpRestartFlag = 199;
    uint32 bpReverseFlag = 200;
    uint32 batRelayCloseFailFlag = 201;
    uint32 batSoftRelayStatus = 202;
    uint32 batRealyStatus = 203; // Note: Typo, should be "RelayStatus"
    uint32 pcsRelayStateShow = 204;
    uint32 emsWorkState = 205;
//    case 206:
//        n.evBindList = p.sys.EVChargingSnList.decode(e, e.uint32());
//        break;
    uint32 afciFaultCntCh1 = 207;
    float afciFaultValueCh1 = 208;
    float afciFaultMaxValueCh1 = 209;
    float afciProtectValueCh1 = 210;
    uint32 afciFaultFlagCh1 = 211;
    uint32 afciFaultCntCh2 = 212;
    float afciFaultValueCh2 = 213;
    float afciFaultMaxValueCh2 = 214;
    float afciProtectValueCh2 = 215;
    uint32 afciFaultFlagCh2 = 216;
    uint32 afciSelfTestCmdState = 217;
    uint32 afciEnableCmdState = 218;
    uint32 afciFaultClearState = 219;
    uint32 afciSellfTestResult = 220; // Note: Typo, should be "SelfTestResult"
    uint32 afciSwitchFreqCh1 = 221;
    uint32 afciSwitchFreqCh2 = 222;
    uint32 sysCalStat = 223;
    uint32 ethWanStat = 224;
    uint32 wifiStaStat = 225;
    string wireless_4gIccid = 226;
    uint32 virtualHardEdition = 227;
    uint32 userRole = 228;
    uint32 chgDsgMode = 229;
    float chgDsgPwr = 230;
    bool parallelAllowState = 231;
    uint32 parallelTypeSet = 232;
    uint32 parallelType = 233;
    uint32 afciIsExist = 234;
    uint32 afciEn = 235;
    uint32 afciEnSet = 236;
    uint32 parallelTypeCur = 237;
    uint32 pcsPcsAntiBackFlowProtectSwitch = 238;
    float pcsAntiBackFlowExportCurrentLimit = 239;
    float pcsAntiBackFlowImportCurrentLimit = 240;
    uint32 pcsFreqLocalCommand = 241;
    uint32 pcsFreqExternalSignal = 242;
    uint32 pcsAutoTestState = 243;
    uint32 pcsAutoTestFlag = 244;
    uint32 pcsAvgOvpProtectCnt = 245;
    uint32 pcsOvpProtectCnt = 246;
    uint32 pcsUvp1ProtectCnt = 247;
    uint32 pcsUvp2ProtectCnt = 248;
    uint32 pcsOfpProtectCnt = 249;
    uint32 pcsUfpProtectCnt = 250;
    float pcsAvgOvpProtectValue = 251;
    float pcsOvpProtectValue = 252;
    float pcsUvp1ProtectValue = 253;
    float pcsUvp2ProtectValue = 254;
    float pcsOfpProtectValue = 255;
    float pcsUfpProtectValue = 256;
    uint32 pcsAutoTestPercent = 257;
}

message EnergyStreamReportParallel {
    // cmdFunc: 96, cmdId: 50
    // topic /app/device/property/HJ37ZDH5ZG4C0054
    // mpptPwr, float, 97.1748046875
    // sysLoadPwr, float, 1397.1748046875
    // sysGridPwr, float, -17.61250114440918
    // bpPwr, float, -1414.787353515625
    // bpSoc, uint32, 61
    //
}
